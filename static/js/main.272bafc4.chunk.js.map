{"version":3,"sources":["components/Alert.js","components/About.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","About","useState","btnText","setbtnText","color","backgroundColor","myStyle","setmyStyle","style","id","onClick","Navbar","mode","to","title","about","toggleMode","htmlFor","TextForm","text","setText","heading","value","rows","onChange","event","console","log","target","newvalue","showAlert","document","getElementById","select","navigator","clipboard","writeText","newText","split","join","length","defaultProps","App","setAlert","massage","setTimeout","setMode","aboutText","body","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.272bafc4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize =(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert &&<div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong> {props.alert.msg}\r\n            {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React,{useState} from 'react'\r\n\r\nexport default function About() {\r\n    const [btnText, setbtnText] = useState('Enable Dark Mode')\r\n    const [myStyle, setmyStyle] = useState(\r\n        {\r\n            color:'black',\r\n            backgroundColor:'white'\r\n        }\r\n    )\r\n    const toggleStyle=()=>{\r\n        if (myStyle.backgroundColor === 'white') {\r\n           setmyStyle({\r\n            color:'white',\r\n            backgroundColor:'black'\r\n           })\r\n           setbtnText('Enable Light Mode')\r\n        }\r\n        else{\r\n            setmyStyle({\r\n                color:'black',\r\n                backgroundColor:'white'\r\n            })\r\n            setbtnText('Enable Dark Mode')\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <>\r\n        <div className=\"container\" style={myStyle}>\r\n            <h1>About</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n                <div className=\"accordion-item\" style={myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                    <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style={myStyle}>\r\n                        Accordion Item #1\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\">\r\n                        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                    <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style={myStyle}>\r\n                        Accordion Item #2\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\">\r\n                        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                    <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style={myStyle}>\r\n                        Accordion Item #3\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\">\r\n                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <button className=\"btn btn-success my-3\"onClick={toggleStyle}>{btnText}</button>\r\n        </div>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.about}</Link>\r\n        </li>\r\n      \r\n   \r\n      </ul>\r\n      <div className={`form-check form-switch text-${props.mode==='dark'?'light':'dark'}`}>\r\n        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.mode==='dark'?'Enable Light Mode':'Enable Dark Mode'}</label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    about: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    about: 'About'\r\n  };","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handelOnChange=(event)=>{\r\n        console.log('On change');\r\n        setText(event.target.value)\r\n    }\r\n    const handelUpClick=()=>{\r\n        console.log('UpperCase Clicked');\r\n        let newvalue=text.toUpperCase();\r\n        setText(newvalue);\r\n        props.showAlert(\"Text Converted into UpperCase\",\"success\");\r\n\r\n    }\r\n    const handelLowClick=()=>{\r\n        console.log('UpperCase Clicked');\r\n        let newvalue=text.toLowerCase();\r\n        setText(newvalue);\r\n        props.showAlert(\"Text Converted into LowerCase\",\"success\");\r\n        \r\n\r\n    }\r\n    const handelCopy=()=>{\r\n        let text=document.getElementById('exampleFormControlTextarea1');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text Copy in Clipboard\",\"success\");\r\n\r\n    }\r\n    const handleClearClick = ()=>{ \r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text Clear\",\"success\");\r\n        \r\n    }\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra Space Remove\",\"success\");\r\n\r\n        \r\n    }\r\n    const [text, setText] = useState('');\r\n\r\n    return (\r\n        <>\r\n          <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n            <div className=\"mb-3\">\r\n                <h1>{props.heading}</h1>\r\n                <textarea className=\"form-control\" style={{backgroundColor: props.mode==='dark'?'gray':'white'}} value={text} id=\"exampleFormControlTextarea1\" rows=\"8\" onChange={handelOnChange}></textarea>\r\n                <button className=\"btn btn-primary my-3 mx-1\" onClick={handelUpClick}>Convert To UpperCase</button>\r\n                <button className=\"btn btn-primary my-3 mx-1\" onClick={handelLowClick}>Convert To LowerCase</button>\r\n                <button className=\"btn btn-primary my-3 mx-1\" onClick={handelCopy}>Copy Text</button>\r\n                <button className=\"btn btn-primary my-3 mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n                <button className=\"btn btn-primary my-3 mx-1\" onClick={handleClearClick}>Clear Text</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n                <h1>Your text Summery</h1>\r\n                <p>{text===\"\"?\"0\":text.split(\" \").length} words and {text.length} characters</p>\r\n                <p>{0.008 * text.split(\" \").length} minites to read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0?text:\"Enter something to preview it here\"}</p>\r\n            </div>\r\n          </div>\r\n        </>\r\n\r\n    );\r\n\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nimport './App.css';\r\nimport Alert from './components/Alert';\r\nimport About from './components/About';\r\nimport Navbar from './components/Navbar';\r\nimport TextForm from './components/TextForm';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n\r\n} from \"react-router-dom\";\r\nfunction App() {\r\n  const [alert, setAlert] = useState(null);\r\n  const showAlert = (massage, type) => {\r\n    setAlert({\r\n      msg: massage,\r\n      type: type\r\n    })\r\n    setTimeout(() => {\r\n      setAlert(null);\r\n    }, 1500);\r\n  }\r\n  const toggleMode = () => {\r\n    if (mode === 'light') {\r\n      setMode('dark');\r\n      document.body.style.backgroundColor = '#06091a';\r\n      showAlert(\"Dark Mode Enable\", \"success\");\r\n    }\r\n    else {\r\n      setMode('light');\r\n      document.body.style.backgroundColor = 'white';\r\n      showAlert(\"Light Mode Enable\", \"success\");\r\n    }\r\n  }\r\n  const [mode, setMode] = useState('light');\r\n  return (\r\n    <>\r\n      <Router>\r\n\r\n        <Navbar title=\"TextUtils\" aboutText=\"About\" mode={mode} toggleMode={toggleMode} />\r\n        <Alert alert={alert} />\r\n        <Switch>\r\n          <Route path=\"/about\">\r\n            <About/>\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <TextForm showAlert={showAlert} heading=\"Enter Your Text here\" mode={mode} />\r\n            {/* <About/> */}\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}